// src/tavily-client.ts
import defaultKy from "ky";

// src/utils.ts
function pruneNullOrUndefined(obj) {
  return Object.fromEntries(
    Object.entries(obj).filter(
      ([, value]) => value !== void 0 && value !== null
    )
  );
}

// src/tavily-client.ts
var tavily;
((tavily2) => {
  tavily2.API_BASE_URL = "https://api.tavily.com";
})(tavily || (tavily = {}));
var TavilyClient = class {
  ky;
  apiKey;
  apiBaseUrl;
  constructor({
    apiKey = process.env.TAVILY_API_KEY,
    apiBaseUrl = tavily.API_BASE_URL,
    ky = defaultKy
  } = {}) {
    if (!apiKey) {
      throw new Error(
        'TavilyClient missing required "apiKey" (defaults to "TAVILY_API_KEY")'
      );
    }
    this.apiKey = apiKey;
    this.apiBaseUrl = apiBaseUrl;
    this.ky = ky.extend({
      prefixUrl: this.apiBaseUrl
    });
  }
  /**
   * Search for data based on a query.
   */
  async search(queryOrOpts) {
    const options = typeof queryOrOpts === "string" ? { query: queryOrOpts } : queryOrOpts;
    const res = await this.ky.post("search", {
      json: {
        ...options,
        api_key: this.apiKey
      }
    }).json();
    return pruneNullOrUndefined({
      ...res,
      results: res.results?.map(pruneNullOrUndefined)
    });
  }
};
export {
  TavilyClient,
  tavily
};
//# sourceMappingURL=index.js.map